
==================== FINAL INTERFACE ====================
2017-01-03 11:16:11.046316 UTC

interface Regression-0.1.0.0-BgfkxP9qOsG1ta2nZqj6mX:Matrix 8001
  interface hash: 069b01f48546f5f9fd23687c498ea5c4
  ABI hash: 2f18615bb81ce0b3a295f7f10fd630e9
  export-list hash: bb60971c66321ae2ab28e819d5685e13
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Matrix.conhor
  Matrix.conver
  Matrix.deleteColumns
  Matrix.emptyM
  Matrix.filterLinesHor
  Matrix.filterLinesVer
  Matrix.findAMostQuadraticEdgeSize
  Matrix.findEdgeSizes
  Matrix.getColumn
  Matrix.getElementByInd
  Matrix.getHeight
  Matrix.getSize
  Matrix.getWidth
  Matrix.howManyElements
  Matrix.normalize
  Matrix.packM
  Matrix.scaleLines
  Matrix.toASquareMatrix
  Matrix.toHeightMatrix
  Matrix.toList
  Matrix.toRectMatrix
  Matrix.transposeM
  Matrix.unpackM
  Matrix.vector
  Matrix.zipWithLines
  Matrix.zipWithM
  Matrix.Matrix{Matrix.EmptyM Matrix.Matrix}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
b65dc8d2f4ebb603778bb137d684f88a
  $fEqMatrix :: GHC.Classes.Eq a => GHC.Classes.Eq (Matrix.Matrix a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (Matrix.Matrix a)
                  (Matrix.$fEqMatrix_$c== @ a $dEq)
                  (Matrix.$fEqMatrix_$c/= @ a $dEq) -}
b8e3d8f5f50b5f0dcaea3abebc867882
  $fEqMatrix1 :: [[a]]
  {- Strictness: x -}
b65dc8d2f4ebb603778bb137d684f88a
  $fEqMatrix_$c/= ::
    GHC.Classes.Eq a =>
    Matrix.Matrix a -> Matrix.Matrix a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Matrix.Matrix a)
                   (y :: Matrix.Matrix a) ->
                 GHC.Classes.not (Matrix.$fEqMatrix_$c== @ a $dEq x y)) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fEqMatrix_$c== ::
    GHC.Classes.Eq a =>
    Matrix.Matrix a -> Matrix.Matrix a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,1*U(1*C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: Matrix.Matrix a)
                   (b :: Matrix.Matrix a) ->
                 case Matrix.zipWithM
                        @ a
                        @ a
                        @ GHC.Types.Bool
                        (GHC.Classes.== @ a $dEq)
                        a1
                        b of wild {
                   Matrix.EmptyM
                   -> case Matrix.$fEqMatrix1 ret_ty GHC.Types.Bool of {}
                   Matrix.Matrix xs
                   -> (Matrix.$fEqMatrix_go xs) `cast` (Data.Monoid.N:All[0]) }) -}
f0ae6e44e9003777f28df9bfa17af8db
  $fEqMatrix_go :: [[GHC.Types.Bool]] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b65dc8d2f4ebb603778bb137d684f88a
  $fFunctorMatrix :: GHC.Base.Functor Matrix.Matrix
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Matrix.Matrix
                  Matrix.$fFunctorMatrix_$cfmap
                  Matrix.$fFunctorMatrix_$c<$ -}
b65dc8d2f4ebb603778bb137d684f88a
  $fFunctorMatrix_$c<$ :: a -> Matrix.Matrix b -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: a) (eta1 :: Matrix.Matrix b) ->
                 Matrix.$fFunctorMatrix_$cfmap @ b @ a (\ (ds :: b) -> eta) eta1) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fFunctorMatrix_$cfmap ::
    (a -> b) -> Matrix.Matrix a -> Matrix.Matrix b
  {- Arity: 2, Strictness: <L,C(U)><S,1*U> -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix :: GHC.Num.Num a => GHC.Num.Num (Matrix.Matrix a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),C(U),C(U),C(U),C(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dNum :: GHC.Num.Num a).
                  @ (Matrix.Matrix a)
                  (Matrix.$fNumMatrix_$c+ @ a $dNum)
                  (Matrix.$fNumMatrix_$c- @ a $dNum)
                  (Matrix.$fNumMatrix_$c* @ a $dNum)
                  (Matrix.$fNumMatrix_$cnegate @ a $dNum)
                  (Matrix.$fNumMatrix_$cabs @ a $dNum)
                  (Matrix.$fNumMatrix_$csignum @ a $dNum)
                  (Matrix.$fNumMatrix_$cfromInteger @ a $dNum) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix1 ::
    Matrix.Matrix a -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <B,1*U><B,1*U>x -}
be3dcaf44790b28953604f7930223ad6
  $fNumMatrix2 :: Matrix.Width
  {- Strictness: x -}
bb29216c5261887e1e2435b62b751f29
  $fNumMatrix3 :: Matrix.Height
  {- Strictness: x -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix_$c* ::
    GHC.Num.Num a =>
    Matrix.Matrix a -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><S,U><S,1*U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (a1 :: Matrix.Matrix a)
                   (b :: Matrix.Matrix a) ->
                 case a1 of wild {
                   Matrix.EmptyM
                   -> case Matrix.$fNumMatrix3 ret_ty (Matrix.Matrix a) of {}
                   Matrix.Matrix ds
                   -> case ds of wild1 {
                        [] -> case Matrix.$fNumMatrix3 ret_ty (Matrix.Matrix a) of {}
                        : x xs
                        -> case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                           case b of wild2 {
                             Matrix.EmptyM
                             -> case Matrix.$fNumMatrix2 ret_ty (Matrix.Matrix a) of {}
                             Matrix.Matrix xs1
                             -> case GHC.List.$wlenAcc @ [a] xs1 0# of ww1 { DEFAULT ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# ww2 ww1) of wild3 {
                                  GHC.Types.False -> Matrix.$fNumMatrix1 @ a wild wild2
                                  GHC.Types.True
                                  -> Matrix.transposeM
                                       @ a
                                       (Matrix.mulling
                                          @ a
                                          $dNum
                                          (Matrix.transposeM @ a wild)
                                          wild2) } } } } } }) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix_$c+ ::
    GHC.Num.Num a =>
    Matrix.Matrix a -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 3,
     Strictness: <L,1*U(1*C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Matrix.Matrix a)
                   (eta1 :: Matrix.Matrix a) ->
                 Matrix.zipWithM @ a @ a @ a (GHC.Num.+ @ a $dNum) eta eta1) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix_$c- ::
    GHC.Num.Num a =>
    Matrix.Matrix a -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),C(U),C(U),C(U),C(U))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (x :: Matrix.Matrix a)
                   (y :: Matrix.Matrix a) ->
                 Matrix.$fNumMatrix_$c+
                   @ a
                   $dNum
                   x
                   (Matrix.$fNumMatrix_$cnegate @ a $dNum y)) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix_$cabs ::
    GHC.Num.Num a => Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,1*C(U),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (eta :: Matrix.Matrix a) ->
                 Matrix.$fFunctorMatrix_$cfmap
                   @ a
                   @ a
                   (GHC.Num.abs @ a $dNum)
                   eta) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix_$cfromInteger ::
    GHC.Num.Num a => GHC.Integer.Type.Integer -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (x :: GHC.Integer.Type.Integer) ->
                 let {
                   xs :: a = GHC.Num.fromInteger @ a $dNum x
                 } in
                 let {
                   xs1 :: [a] = GHC.Types.: @ a xs (GHC.Types.[] @ a)
                 } in
                 Matrix.toRectMatrix
                   @ a
                   (case Matrix.findEdgeSizes @ a xs1 of wild {
                      [] -> case GHC.List.badHead ret_ty Matrix.Width of {}
                      : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } })
                   (case Matrix.findEdgeSizes @ a xs1 of wild {
                      [] -> case GHC.List.badHead ret_ty Matrix.Height of {}
                      : x1 ds1 -> case x1 of wild1 { (,) ds2 y -> y } })
                   xs1) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix_$cnegate ::
    GHC.Num.Num a => Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,1*U(A,A,A,1*C(U),A,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (eta :: Matrix.Matrix a) ->
                 Matrix.$fFunctorMatrix_$cfmap
                   @ a
                   @ a
                   (GHC.Num.negate @ a $dNum)
                   eta) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fNumMatrix_$csignum ::
    GHC.Num.Num a => Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,1*C(U),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (eta :: Matrix.Matrix a) ->
                 Matrix.$fFunctorMatrix_$cfmap
                   @ a
                   @ a
                   (GHC.Num.signum @ a $dNum)
                   eta) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fShowMatrix :: GHC.Show.Show a => GHC.Show.Show (Matrix.Matrix a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Matrix.Matrix a)
                  (Matrix.$fShowMatrix_$cshowsPrec @ a $dShow)
                  (Matrix.$fShowMatrix_$cshow @ a $dShow)
                  (Matrix.$fShowMatrix_$cshowList @ a $dShow) -}
1d38f1d2ac9287b884886386c3029817
  $fShowMatrix1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
e962fd0fdf806e560106508f2d56ad44
  $fShowMatrix2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
694212de63d5b57541a784c97f3efe4d
  $fShowMatrix3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Empty matrix"#) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fShowMatrix_$cshow ::
    GHC.Show.Show a => Matrix.Matrix a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,1*U,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: Matrix.Matrix a) ->
                 case ds of wild {
                   Matrix.EmptyM -> Matrix.$fShowMatrix3
                   Matrix.Matrix ipv
                   -> case Matrix.transposeM @ a wild of wild1 {
                        Matrix.EmptyM
                        -> case Matrix.$fEqMatrix1 ret_ty GHC.Base.String of {}
                        Matrix.Matrix xs
                        -> let {
                             g :: a -> [GHC.Types.Char] = GHC.Show.show @ a $dShow
                           } in
                           letrec {
                             go1 :: [a] -> [GHC.Types.Char] {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds1 :: [a]) ->
                               case ds1 of wild2 {
                                 [] -> Matrix.$fShowMatrix_z
                                 : y ys
                                 -> GHC.Base.++
                                      @ GHC.Types.Char
                                      (GHC.Base.++ @ GHC.Types.Char (g y) Matrix.$fShowMatrix1)
                                      (go1 ys) }
                           } in
                           letrec {
                             go2 :: [[a]] -> [GHC.Types.Char]
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds1 :: [[a]]) ->
                               case ds1 of wild2 {
                                 [] -> GHC.Types.[] @ GHC.Types.Char
                                 : y ys -> GHC.Base.++ @ GHC.Types.Char (go1 y) (go2 ys) }
                           } in
                           go2 xs } }) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fShowMatrix_$cshowList ::
    GHC.Show.Show a => [Matrix.Matrix a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,U,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Matrix.Matrix a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Matrix.Matrix a)
                   (\ (x :: Matrix.Matrix a) (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Matrix.$fShowMatrix_$cshow @ a $dShow x)
                      s1)
                   ls
                   s) -}
b65dc8d2f4ebb603778bb137d684f88a
  $fShowMatrix_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Matrix.Matrix a -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,1*U(A,1*U,A)><L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (x :: Matrix.Matrix a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Matrix.$fShowMatrix_$cshow @ a $dShow x))
                   s) -}
658be5f7e0538ae3ab408ac70a4f8a7b
  $fShowMatrix_z :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Matrix.$fShowMatrix2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
03e6821fd63fc6ff20ba6b766c45eee6
  $tc'EmptyM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10998939451333070695##
                   13591662482535266634##
                   Matrix.$trModule
                   Matrix.$tc'EmptyM1) -}
9215a3acadfdde400c2fd6bcc10de73c
  $tc'EmptyM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EmptyM"#) -}
6fb38f5e009797391ffa17baadf474f0
  $tc'Matrix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9519218874261716999##
                   14241207881608406365##
                   Matrix.$trModule
                   Matrix.$tc'Matrix1) -}
1a0fa0ef3920b5f1b72809424f4282eb
  $tc'Matrix1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Matrix"#) -}
2f15a8e14fd2afefe803bfa569cfd167
  $tcMatrix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6879586085828880067##
                   6167075844438285825##
                   Matrix.$trModule
                   Matrix.$trModule1) -}
90ca189929dc2c55c0b3252a81416dc9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Matrix.$trModule2
                   Matrix.$trModule1) -}
fc8262e8b372b6e16b1978650674318e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Matrix"#) -}
2c8fa4d13072e5b49b37cb2650944517
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Regression-0.1.0.0-BgfkxP9qOsG1ta2nZqj6mX"#) -}
f897292f6f7d4e20d4e2e76151418f1f
  $wfilterLinesVer ::
    (a -> GHC.Types.Bool) -> Matrix.Matrix a -> (# [[a]] #)
  {- Arity: 2, Strictness: <L,C(U)><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: a -> GHC.Types.Bool)
                   (w1 :: Matrix.Matrix a) ->
                 (# case w1 of wild {
                      Matrix.EmptyM -> case Matrix.$fEqMatrix1 ret_ty [[a]] of {}
                      Matrix.Matrix xs
                      -> GHC.List.filter
                           @ [a]
                           (\ (eta :: [a]) ->
                            letrec {
                              go1 :: [a] -> Data.Monoid.All {- Arity: 1, Strictness: <S,1*U> -}
                              = \ (ds :: [a]) ->
                                case ds of wild1 {
                                  [] -> GHC.Types.True `cast` (Sym (Data.Monoid.N:All[0]))
                                  : y ys
                                  -> case w y of wild2 {
                                       GHC.Types.False
                                       -> GHC.Types.False `cast` (Sym (Data.Monoid.N:All[0]))
                                       GHC.Types.True -> go1 ys } }
                            } in
                            go1 eta)
                             `cast`
                           (<[a]>_R ->_R Data.Monoid.N:All[0])
                           xs } #)) -}
48961e9c4f4797c267e61e8a2d84fb96
  $wgetElementByInd ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> Matrix.Matrix a -> a
  {- Arity: 3, Strictness: <S,U><S,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (w :: Matrix.Matrix a) ->
                 case w of wild {
                   Matrix.EmptyM -> Matrix.getElementByInd4 @ a
                   Matrix.Matrix xs
                   -> case GHC.List.$wlenAcc @ [a] xs 0# of ww2 { DEFAULT ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># ww ww2) of wild1 {
                        GHC.Types.False
                        -> case xs of wild2 {
                             [] -> case GHC.List.badHead ret_ty a of {}
                             : x ds1
                             -> case GHC.List.$wlenAcc @ a x 0# of ww3 { DEFAULT ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.># ww1 ww3) of wild3 {
                                  GHC.Types.False
                                  -> Matrix.getElementByInd3
                                       @ a
                                       ww1
                                       (Matrix.getElementByInd2 @ a ww wild2)
                                  GHC.Types.True -> Matrix.getElementByInd1 @ a wild2 ww1 ww } } }
                        GHC.Types.True -> Matrix.getElementByInd1 @ a xs ww1 ww } } }) -}
47d03be22354b273cb9da10809c695ab
  $wgetSize :: Matrix.Matrix a -> (# Matrix.Width, Matrix.Height #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ a (w :: Matrix.Matrix a) ->
                 case w of wild {
                   Matrix.EmptyM
                   -> case Matrix.getSize1
                      ret_ty (# Matrix.Width, Matrix.Height #)
                      of {}
                   Matrix.Matrix ds
                   -> case ds of wild1 {
                        []
                        -> case Matrix.getSize1
                           ret_ty (# Matrix.Width, Matrix.Height #)
                           of {}
                        : x xs
                        -> (# case GHC.List.$wlenAcc @ [a] wild1 0# of ww2 { DEFAULT ->
                              GHC.Types.I# ww2 },
                              case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                              GHC.Types.I# ww2 } #) } }) -}
4ad5106527b35b64782d1c7855f7b02d
  $whowManyElements :: Matrix.Matrix a -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ a (w :: Matrix.Matrix a) ->
                 case w of wild {
                   Matrix.EmptyM
                   -> case Matrix.howManyElements1 ret_ty GHC.Prim.Int# of {}
                   Matrix.Matrix ds
                   -> case ds of wild1 {
                        [] -> case Matrix.howManyElements1 ret_ty GHC.Prim.Int# of {}
                        : x xs
                        -> case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                           case GHC.List.$wlenAcc @ [a] xs 0# of ww1 { DEFAULT ->
                           GHC.Prim.*# ww2 (GHC.Prim.+# ww1 1#) } } } }) -}
70c918763baa25c4875f17200f6cbfa8
  $wmakeListOfOneElementLists :: [a] -> (# [a], [[a]] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
f7b9dc23ab9090fb12fb0f99ca23985f
  $wscaleLines ::
    (GHC.Real.Fractional a, GHC.Real.Real a) =>
    Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 3,
     Strictness: <L,U(U,C(C1(U)),A,C(U))><L,U(U,U,C(U))><S,1*U>,
     Inline: [0] -}
595778d6561afb6a26a627b70c56e4ff
  type Axis = GHC.Types.Int
c05c1c6f2d5dc0102a7fe5e405ed8c3f
  type Height = GHC.Types.Int
b65dc8d2f4ebb603778bb137d684f88a
  data Matrix a = EmptyM | Matrix [[a]]
0a8afe67efab4975e80e9fdf10644a73
  type Width = GHC.Types.Int
bbf63fcc114fbf0ca48ea620dada1fdb
  concatHorizM ::
    Matrix.Matrix a -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
7a8006d7f7ac11f607590971f1d210cc
  conhor ::
    Matrix.Matrix a
    -> Matrix.Matrix a -> GHC.Base.Maybe (Matrix.Matrix a)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   (ds :: Matrix.Matrix a)
                   (ds1 :: Matrix.Matrix a) ->
                 case ds of wild {
                   Matrix.EmptyM -> Matrix.conhor1 @ a
                   Matrix.Matrix xs
                   -> case ds1 of wild1 {
                        Matrix.EmptyM -> Matrix.conhor1 @ a
                        Matrix.Matrix ys
                        -> case GHC.List.$wlenAcc @ [a] xs 0# of ww2 { DEFAULT ->
                           case GHC.List.$wlenAcc @ [a] ys 0# of ww1 { DEFAULT ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 ww1) of wild2 {
                             GHC.Types.False -> GHC.Base.Nothing @ (Matrix.Matrix a)
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ (Matrix.Matrix a)
                                  (Matrix.concatHorizM @ a wild wild1) } } } } }) -}
4350386d5646b7d80cdeff9525568b5b
  conhor1 :: GHC.Base.Maybe (Matrix.Matrix a)
  {- Strictness: x -}
13f1c7e9c10c472ee6d637c35aae592a
  conver ::
    Matrix.Matrix a
    -> Matrix.Matrix a -> GHC.Base.Maybe (Matrix.Matrix a)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   (ds :: Matrix.Matrix a)
                   (ds1 :: Matrix.Matrix a) ->
                 case ds of wild {
                   Matrix.EmptyM -> Matrix.conver1 @ a
                   Matrix.Matrix ds2
                   -> case ds2 of wild1 {
                        [] -> Matrix.conver1 @ a
                        : x xs
                        -> case ds1 of wild2 {
                             Matrix.EmptyM -> Matrix.conver1 @ a
                             Matrix.Matrix ds3
                             -> case ds3 of wild3 {
                                  [] -> Matrix.conver1 @ a
                                  : y ys
                                  -> case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                                     case GHC.List.$wlenAcc @ a y 0# of ww1 { DEFAULT ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# ww2 ww1) of wild4 {
                                       GHC.Types.False -> GHC.Base.Nothing @ (Matrix.Matrix a)
                                       GHC.Types.True
                                       -> GHC.Base.Just
                                            @ (Matrix.Matrix a)
                                            (Matrix.Matrix
                                               @ a
                                               (GHC.Base.++ @ [a] wild1 wild3)) } } } } } } }) -}
61b7ec3161ef30e1455acf42d93609ae
  conver1 :: GHC.Base.Maybe (Matrix.Matrix a)
  {- Strictness: x -}
614e58452c914caca9ecae828fd2c54f
  deleteColumns ::
    [GHC.Types.Int] -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
02507268b02784836d07d73ba66cd56d
  emptyM :: Matrix.Matrix a
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Matrix.EmptyM -}
0c61fcffb9aca7124ea040f885e73e76
  filterLinesHor ::
    (a -> GHC.Types.Bool) -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,C(U)><L,1*U>,
     Unfolding: (\ @ a
                   (f :: a -> GHC.Types.Bool)
                   (eta :: Matrix.Matrix a) ->
                 Matrix.transposeM
                   @ a
                   (Matrix.Matrix
                      @ a
                      (case Matrix.transposeM @ a eta of wild {
                         Matrix.EmptyM -> case Matrix.$fEqMatrix1 ret_ty [[a]] of {}
                         Matrix.Matrix xs
                         -> GHC.List.filter
                              @ [a]
                              (\ (eta1 :: [a]) ->
                               letrec {
                                 go1 :: [a] -> Data.Monoid.All {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (ds :: [a]) ->
                                   case ds of wild1 {
                                     [] -> GHC.Types.True `cast` (Sym (Data.Monoid.N:All[0]))
                                     : y ys
                                     -> case f y of wild2 {
                                          GHC.Types.False
                                          -> GHC.Types.False `cast` (Sym (Data.Monoid.N:All[0]))
                                          GHC.Types.True -> go1 ys } }
                               } in
                               go1 eta1)
                                `cast`
                              (<[a]>_R ->_R Data.Monoid.N:All[0])
                              xs }))) -}
13c3742f0a67090ca494c617afef0a23
  filterLinesVer ::
    (a -> GHC.Types.Bool) -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,C(U)><L,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> GHC.Types.Bool) (w1 :: Matrix.Matrix a) ->
                 case Matrix.$wfilterLinesVer @ a w w1 of ww { Unit# ww1 ->
                 Matrix.Matrix @ a ww1 }) -}
8a7b771150d4cda225d9b9595e1be6d6
  findAMostQuadraticEdgeSize :: [a] -> (Matrix.Width, Matrix.Height)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 case Matrix.findEdgeSizes @ a xs of wild {
                   [] -> GHC.List.badHead @ (Matrix.Width, Matrix.Height)
                   : x ds1 -> x }) -}
46699419a305188fdfb5de1453a70ec0
  findEdgeSizes :: [a] -> [(Matrix.Width, Matrix.Height)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a (xs :: [a]) ->
                 case GHC.List.$wlenAcc @ a xs 0# of ww2 { DEFAULT ->
                 let {
                   x :: GHC.Prim.Double#
                   = GHC.Prim.sqrtDouble# (GHC.Prim.int2Double# ww2)
                 } in
                 let {
                   n :: GHC.Prim.Int# = GHC.Prim.double2Int# x
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [(Matrix.Width, Matrix.Height)]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.># x1 ww2) of wild {
                       GHC.Types.False
                       -> let {
                            lvl49 :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww2
                          } in
                          letrec {
                            go1 :: GHC.Prim.Int# -> [(Matrix.Width, Matrix.Height)]
                              {- Arity: 1, Strictness: <S,U> -}
                            = \ (x2 :: GHC.Prim.Int#) ->
                              let {
                                z :: [(Matrix.Width, Matrix.Height)]
                                = case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.==# x2 ww2) of wild1 {
                                    GHC.Types.False -> go1 (GHC.Prim.+# x2 1#)
                                    GHC.Types.True -> GHC.Types.[] @ (Matrix.Width, Matrix.Height) }
                              } in
                              let {
                                lvl50 :: GHC.Types.Int = GHC.Types.I# x2
                              } in
                              letrec {
                                go2 :: [GHC.Types.Int] -> [(Matrix.Width, Matrix.Height)]
                                  {- Arity: 1, Strictness: <S,1*U> -}
                                = \ (ds :: [GHC.Types.Int]) ->
                                  case ds of wild1 {
                                    [] -> z
                                    : y ys
                                    -> case y of wild2 { GHC.Types.I# y1 ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.==# (GHC.Prim.*# x2 y1) ww2) of wild3 {
                                         GHC.Types.False -> go2 ys
                                         GHC.Types.True
                                         -> GHC.Types.:
                                              @ (Matrix.Width, Matrix.Height)
                                              (lvl50, wild2)
                                              (go2 ys) } } }
                              } in
                              go2 lvl49
                          } in
                          go1 x1
                       GHC.Types.True -> GHC.Types.[] @ (Matrix.Width, Matrix.Height) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## x (GHC.Prim.int2Double# n)) of wild1 {
                   GHC.Types.False -> $j n
                   GHC.Types.True -> $j (GHC.Prim.-# n 1#) } }) -}
fad70323c87c6a84bc52586db4913936
  getColumn :: GHC.Types.Int -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,1*U(1*U)><S,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (n :: GHC.Types.Int) (ds :: Matrix.Matrix a) ->
                 case ds of wild {
                   Matrix.EmptyM -> Matrix.getColumn2 @ a
                   Matrix.Matrix xs
                   -> Matrix.Matrix
                        @ a
                        (GHC.Types.:
                           @ [a]
                           (Matrix.getColumn1 @ a n xs)
                           (GHC.Types.[] @ [a])) }) -}
5957772cfdb98f3ad2ccabcf152ab5ff
  getColumn1 :: GHC.Types.Int -> [[a]] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*U)><S,1*U> -}
dfd076f6c248ea89f207f972ade95bcf
  getColumn2 :: Matrix.Matrix a
  {- Strictness: x -}
4639179e3bf20f7241888b396f356744
  getElementByInd ::
    Matrix.Width -> Matrix.Height -> Matrix.Matrix a -> a
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(S),U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Matrix.Width)
                   (w1 :: Matrix.Height)
                   (w2 :: Matrix.Matrix a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Matrix.$wgetElementByInd @ a ww1 ww3 w2 } }) -}
f76d6dd6ada1411737989dc084b9d5c7
  getElementByInd1 :: [[a]] -> GHC.Prim.Int# -> GHC.Prim.Int# -> a
  {- Arity: 3, Strictness: <L,U><L,U><L,U>x -}
aa78d488a54319cf3e65ea30f6fe7960
  getElementByInd2 :: GHC.Prim.Int# -> [[a]] -> [a]
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
6ce8ea34d6cacd6062fd4bae0b836a6b
  getElementByInd3 :: GHC.Prim.Int# -> [a] -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
1cff58b8e19e3dfdbae6884eb13a55be
  getElementByInd4 :: a
  {- Strictness: x -}
e800aa2d2220d9559921f9629584d793
  getHeight :: Matrix.Matrix a -> Matrix.Height
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Matrix.Matrix a) ->
                 case w of wild {
                   Matrix.EmptyM -> Matrix.$fNumMatrix3
                   Matrix.Matrix ds
                   -> case ds of wild1 {
                        [] -> Matrix.$fNumMatrix3
                        : x xs
                        -> case GHC.List.$wlenAcc @ a x 0# of ww { DEFAULT ->
                           GHC.Types.I# ww } } }) -}
3a470305a335292f561cbc74ebaa3e07
  getSize :: Matrix.Matrix a -> (Matrix.Width, Matrix.Height)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Matrix.Matrix a) ->
                 case Matrix.$wgetSize @ a w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
8ac13d28a262ef84891ea9560f966af3
  getSize1 :: (Matrix.Width, Matrix.Height)
  {- Strictness: x -}
9de83142f3349755eb23542a804e82eb
  getWidth :: Matrix.Matrix a -> Matrix.Width
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Matrix.Matrix a) ->
                 case ds of wild {
                   Matrix.EmptyM -> Matrix.$fNumMatrix2
                   Matrix.Matrix xs
                   -> case GHC.List.$wlenAcc @ [a] xs 0# of ww2 { DEFAULT ->
                      GHC.Types.I# ww2 } }) -}
4b3fec9852dc2daf8c083f756d008e02
  howManyElements :: Matrix.Matrix a -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Matrix.Matrix a) ->
                 case Matrix.$whowManyElements @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
2c30e51d3f5486a40bf4ded014d5d450
  howManyElements1 :: GHC.Types.Int
  {- Strictness: x -}
b65dc8d2f4ebb603778bb137d684f88a
  mulling ::
    GHC.Num.Num a =>
    Matrix.Matrix a -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><S,1*U><S,U> -}
465d8dcc42d902f1f4bf19c44f21432a
  normalize :: Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (x :: Matrix.Matrix a) ->
                 let {
                   xs :: [a] = Matrix.toList @ a x
                 } in
                 Matrix.toRectMatrix
                   @ a
                   (Matrix.normalize2 @ a xs)
                   (Matrix.normalize1 @ a xs)
                   xs) -}
2e4fb64c9edcb1493bc5cc121d2afea7
  normalize1 :: [a] -> Matrix.Height
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: [a]) ->
                 case Matrix.findEdgeSizes @ a x of wild {
                   [] -> case GHC.List.badHead ret_ty Matrix.Height of {}
                   : x1 ds1 -> case x1 of wild1 { (,) ds2 y -> y } }) -}
8b218e8573faa90a7bc21370491862ce
  normalize2 :: [a] -> Matrix.Width
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: [a]) ->
                 case Matrix.findEdgeSizes @ a x of wild {
                   [] -> case GHC.List.badHead ret_ty Matrix.Width of {}
                   : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } }) -}
eacbeae1611cd2bd14d0fec0ba707905
  packM :: [[a]] -> Matrix.Matrix a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True) Matrix.Matrix -}
a2807b90e63afc432824aee1e063a608
  scaleLines ::
    (GHC.Num.Num a, GHC.Real.Fractional a, GHC.Real.Real a) =>
    Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 4,
     Strictness: <L,A><L,U(U,C(C1(U)),A,C(U))><L,U(U,U,C(U))><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: GHC.Real.Fractional a)
                   (w2 :: GHC.Real.Real a)
                   (w3 :: Matrix.Matrix a) ->
                 Matrix.$wscaleLines @ a w1 w2 w3) -}
3f5537f14048fc92d6086c4a39490750
  toASquareMatrix :: [a] -> Matrix.Matrix a
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 Matrix.toRectMatrix
                   @ a
                   (Matrix.normalize2 @ a xs)
                   (Matrix.normalize1 @ a xs)
                   xs) -}
b8187eba09c6554307b0f52599072870
  toHeightMatrix :: Matrix.Height -> [a] -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ @ a (height :: Matrix.Height) (xs :: [a]) ->
                 Matrix.toRectMatrix
                   @ a
                   (case GHC.List.$wlenAcc @ a xs 0# of ww2 { DEFAULT ->
                    case height of ww1 { GHC.Types.I# ww3 ->
                    case ww3 of wild {
                      DEFAULT
                      -> case GHC.Prim.quotInt# ww2 wild of ww4 { DEFAULT ->
                         GHC.Types.I# ww4 }
                      -1#
                      -> case ww2 of wild1 {
                           DEFAULT -> GHC.Types.I# (GHC.Prim.quotInt# wild1 -1#)
                           -9223372036854775808#
                           -> case GHC.Real.overflowError ret_ty Matrix.Width of {} }
                      0# -> case GHC.Real.divZeroError ret_ty Matrix.Width of {} } } })
                   height
                   xs) -}
f1f0d975ce5e11a5f6b0e38f340f9cba
  toList :: Matrix.Matrix a -> [a]
  {- Arity: 1, Strictness: <S,1*U> -}
b65dc8d2f4ebb603778bb137d684f88a
  toRectMatrix ::
    Matrix.Width -> Matrix.Height -> [a] -> Matrix.Matrix a
  {- Arity: 3, Strictness: <L,1*U(1*U)><L,U(U)><S,1*U> -}
b65dc8d2f4ebb603778bb137d684f88a
  transposeM :: Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 1, Strictness: <S,1*U> -}
0affd36c3c49a90867605a0f46918ac7
  unpackM :: Matrix.Matrix a -> [[a]]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Matrix.Matrix a) ->
                 case ds of wild {
                   Matrix.EmptyM -> Matrix.$fEqMatrix1 @ a
                   Matrix.Matrix xs -> xs }) -}
33c1cccfcd10776413b3b96a69258578
  vector :: [a] -> Matrix.Axis -> Matrix.Matrix a
  {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U)>,
     Unfolding: (\ @ a (ds :: [a]) (ds1 :: Matrix.Axis) ->
                 case ds of wild {
                   [] -> Matrix.EmptyM @ a
                   : ipv ipv1
                   -> case ds1 of wild1 { GHC.Types.I# ds2 ->
                      case ds2 of ds3 {
                        DEFAULT -> Matrix.vector1 @ a
                        0#
                        -> Matrix.Matrix @ a (GHC.Types.: @ [a] wild (GHC.Types.[] @ [a]))
                        1#
                        -> Matrix.Matrix
                             @ a
                             (case Matrix.$wmakeListOfOneElementLists
                                     @ a
                                     wild of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ [a] ww1 ww2 }) } } }) -}
093d4f97ae4f0cfd80ad8c1142e4619c
  vector1 :: Matrix.Matrix a
  {- Strictness: x -}
64ee5fc8ed2dd0a26be456ef345a9c7b
  zipWithLines :: (a -> a -> a) -> Matrix.Matrix a -> Matrix.Matrix a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a (f :: a -> a -> a) (ds :: Matrix.Matrix a) ->
                 case ds of wild {
                   Matrix.EmptyM -> Matrix.zipWithLines1 @ a
                   Matrix.Matrix ds1
                   -> case ds1 of wild1 {
                        [] -> Matrix.zipWithLines1 @ a
                        : x xs
                        -> letrec {
                             go1 :: [[a]] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds2 :: [[a]]) ->
                               case ds2 of wild2 {
                                 [] -> x : y ys -> GHC.List.zipWith @ a @ a @ a f y (go1 ys) }
                           } in
                           case go1 xs of wild2 {
                             [] -> Matrix.EmptyM @ a
                             : ipv ipv1
                             -> Matrix.Matrix
                                  @ a
                                  (GHC.Types.: @ [a] wild2 (GHC.Types.[] @ [a])) } } }) -}
ef3b5427a4e434559897a328859459ac
  zipWithLines1 :: Matrix.Matrix a
  {- Strictness: x -}
b65dc8d2f4ebb603778bb137d684f88a
  zipWithM ::
    (a -> b -> c)
    -> Matrix.Matrix a -> Matrix.Matrix b -> Matrix.Matrix c
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U> -}
instance [safe] GHC.Classes.Eq [Matrix.Matrix] = Matrix.$fEqMatrix
instance [safe] GHC.Base.Functor [Matrix.Matrix]
  = Matrix.$fFunctorMatrix
instance [safe] GHC.Num.Num [Matrix.Matrix] = Matrix.$fNumMatrix
instance [safe] GHC.Show.Show [Matrix.Matrix] = Matrix.$fShowMatrix
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

